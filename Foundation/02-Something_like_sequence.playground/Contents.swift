import Cocoa

/*
# Something like Sequence

ここでは `シーケンス` っぽいものを説明します.

プログラミング(特に関数型プログラミング)では様々な構造をものをシーケンスっぽく捉えます.

これらの考え方はプログラミングには非常に重要で次回以降に説明する `flatMap` などの理解には欠かすことができないのでここでいくつか例を上げて説明します.

しかしながらこれから説明するものは Swift の `Sequence` を実装しているわけではないので誤解を防ぐために `シーケンスっぽいもの` を `リスト` と表現します.

## List

`[1,2,3]` のようなものです. `[]` もリストです. `[1,2,3,....無限に続く...]` もリストです.

## String

`abcd` は String です.

見方を変えると文字のリスト、`[a,b,c,d]` にも見えます.

## Optional

`.some(1)` or `.none` です.

見方を変えると値が入っていたり入っていなかったりするリストにも見えます.

例えば `.some(1)` は `[1]` で `.none` は `[]` です.

## Result

`.success(1)` or `.failure(error)` です.

これは `Optonal` の `.none` にも値が持てるようになったバージョンに見えますね.

つまり `[1]` or `[error]` なリストです.

## UI の Event (タップとか)

例えばボタンが1つあるとします. まだ誰もタップしていなかったそのイベントは `[]` と表せます.

1回タップしたら `[tap]` と表せます. 2回タップしたら？ `[tap, tap]` と表せます.

すご〜〜〜〜く長い時間軸でイベントを観測すると `[tap, tap, ....]` という表現になり.

イベントは無限リストとみなせます.

※ この考え方は `RxSwift` を理解するために重要です.

## 共通のメソッド

いろいろな例を見てみましたが

実はこれらのリストっぽいデータ構造はある共通のメソッドを持つことができます.

それは `map` と `flatMap` です. ドキュメントを調べてみてください(UI の Event に関しては載ってないです).

※ これが実は関数型プログラミング界隈で時々話題になる `モナド` になるための条件なのですが実際のところモナドについて知らなくても特に困らないのでそんな専門用語があるんだなという程度の理解で大丈夫です.

## まとめ

プログラミングでは様々なデータ構造をリストとみなすことができる.

リストは `map` や `flatMap` といったメソッドを持つことができる.

次回以降は `Sequence` やリストが持つメソッドについて詳しく見ていきたいと思います.
*/
